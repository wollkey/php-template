name: CD

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to VDS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VDS_HOST }}
          username: ${{ secrets.VDS_USERNAME }}
          key: ${{ secrets.VDS_SSH_KEY }}
          script: |
            set -e  # Exit on any error

            APP_DIR="/var/www/php-template"
            cd ${APP_DIR}

            echo "üöÄ Starting deployment..."

            # Login to GitHub Container Registry
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            echo "‚¨áÔ∏è  Pulling new image..."
            docker compose pull app

            # Recreate only app container
            echo "üîÑ Recreating app container..."
            docker compose up -d --force-recreate app

            # Wait for container to be healthy
            echo "‚è≥ Waiting for app to start..."
            sleep 5

            # Check if container is running
            if [ "$(docker ps -q -f name=php-template-app)" ]; then
              echo "‚úÖ App container is running"
            else
              echo "‚ùå App container failed to start"
              docker compose logs app --tail=50
              exit 1
            fi

            # Cleanup old images (keep last 24 hours)
            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=24h"

            echo "‚úÖ Deployment completed successfully!"
